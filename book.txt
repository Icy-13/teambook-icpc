///////////////////////////////////////////////////////////////////////////
                      DSU.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
struct dsu {
    vector<int> parent;
    vector<int> sz;
    int numofsets = 0;

    dsu(int n) {
        parent.resize(n);
        sz.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            sz[i] = 1;
        }
        numofsets = n;
    }

    int get(int a) {
        if (parent[a] != a) parent[a] = get(parent[a]);
        return parent[a];
    }

    bool unite(int a, int b) {
        a = get(a);
        b = get(b);
        if (a == b)
            return false;
        if (sz[a] < sz[b]) swap(a, b);
        parent[b] = a;
        sz[a] += sz[b];
        sz[b] = 0;
        numofsets--;
        return true;
    }
};
///////////////////////////////////////////////////////////////////////////
                      GEOMETRY.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
const long double pi = acos(-1), eps = 1e-7;

bool check(long double a, long double b) {
    return abs(a - b) <= eps;
}

long long signInt(long long a) {
    if (a == 0) return 0;
    return (a > 0 ? 1 : -1);
}

struct point {
    long long x, y;

    point() {
        x = 0;
        y = 0;
    }

    point(long long _x, long long _y) {
        x = _x;
        y = _y;
    }

    long long lenQuadro() {
        return x * x + y * y;
    }

    long double len() {
        return sqrtl(lenQuadro());
    }
};

point operator-(point a, point b) {
    return point(a.x - b.x, a.y - b.y);
}

point operator+(point a, point b) {
    return point(a.x + b.x, a.y + b.y);
}

point operator*(point a, long long k) {
    return point(a.x * k, a.y * k);
}

point operator*(long long k, point a) {
    return a * k;
}

void operator-=(point &a, point b) {
    a = a - b;
}

void operator+=(point &a, point b) {
    a = a + b;
}

void operator*=(point &a, long long k) {
    a = a * k;
}

long long operator*(point a, point b) {
    return a.x * b.x + a.y * b.y;
}

long long operator%(point a, point b) {
    return a.x * b.y - a.y * b.x;
}

long double angle(point a, point b, point c) {
    point ab = b - a;
    point cb = b - c;
    long double res = atan2(abs(ab % cb), abs(ab * cb));
    if (res < 0) {
        res += 2 * pi;
    }
    return res;
}

long double anleTwo(long double a) {
    return a * 90 / pi;
}

istream &operator>>(istream &in, point &p) {
    in >> p.x >> p.y;
    return in;
}

ostream &operator<<(ostream &out, point p) {
    out << p.x << " " << p.y;
    return out;
}

bool pointOnSegment(point p, point a, point b) {
    point ap = p - a;
    point ab = b - a;
    point bp = p - b;
    point ba = a - b;
    return (ap % ab == 0 && signInt(ap * ab) >= 0 && signInt(bp * ba) >= 0);
}

bool checkSegment(point p, point a, point b) {
    point ap = p - a;
    point ab = b - a;
    point bp = p - b;
    point ba = a - b;
    return (ab * ap >= 0 && bp * ba >= 0);
}

struct line {
    long long a, b, c;

    line(point p1, point p2) {
        a = p1.y - p2.y;
        b = p2.x - p1.x;
        c = p1.x * p2.y - p2.x * p1.y;
        if (a == 0 && b == 0) {
            a = 1;
        }
    }

    line(long long _a, long long _b, long long _c) {
        a = _a;
        b = _b;
        c = _c;
        if (a == 0 && b == 0) {
            a = 1;
        }
    }

    long double distpoint(point p) {
        return ((long double)abs(a * p.x + b * p.y + c)) / (sqrt(a * a + b * b));
    }

    long long val(point p) {
        return p.x * a + p.y * b + c;
    }

    point intersectLines(line l) {
        return point((long double)(b * l.c - c * l.b) / (long double)(a * l.b - b * l.a),
                     (long double)(c * l.a - a * l.c) / (long double)(a * l.b - b * l.a));
    }
};

bool checkBeam(point p, point a, point b) {
    point ab = b - a;
    point ap = p - a;
    return (ab * ap >= 0);
}

bool isCol(point a, point b, point c, point d) {
    line l1(a, b);
    line l2(c, d);
    return l1.a * l2.b - l2.a * l1.b == 0;
}

bool segmentOnLine(point a, point b, point c, point d) {
    point ca = a - c;
    point cb = b - c;
    point cd = d - c;
    point da = a - d;
    point db = b - d;
    point dc = c - d;
    return signInt(cd % ca) * signInt(cd % cb) <= 0 || signInt(dc % da) * signInt(dc % db) <= 0;
}

long double one(point A, point B, point C, point D) {  // A -> C
    return (A - C).len();
}

long double two(point A, point B, point C, point D) {  // A -> CD (segment)
    if (checkSegment(A, C, D)) {
        return line(C, D).distpoint(A);
    } else {
        return min((A - C).len(), (A - D).len());
    }
}

long double three(point A, point B, point C, point D) {  // A -> CD (Beam)
    if (checkBeam(A, C, D)) {
        return line(C, D).distpoint(A);
    } else {
        return (A - C).len();
    }
}

long double four(point A, point B, point C, point D) {  // A -> CD (line)
    return line(C, D).distpoint(A);
}

long double eight(point A, point B, point C, point D) {  // AB (segment) -> CD (line)
    if (segmentOnLine(A, B, C, D)) {
        return 0;
    }
    return min(four(A, B, C, D), four(B, A, C, D));
}

bool checkTwoSegments(point a, point b, point c, point d) {
    if (isCol(a, b, c, d)) {
        return min({two(a, b, c, d), two(b, a, c, d), two(c, d, a, b), two(d, c, a, b)}) == 0;
    }
    return (eight(a, b, c, d) == 0 && eight(c, d, a, b) == 0);
}

long double five(point A, point B, point C, point D) {  // AB (segment) -> C
    return two(C, D, A, B);
}

long double six(point A, point B, point C, point D) {  // AB (segment) -> CD (segment)
    if (checkTwoSegments(A, B, C, D)) {
        return 0;
    } else {
        return min({two(A, B, C, D), two(B, A, C, D), two(C, D, A, B), two(D, C, A, B)});
    }
}

long double nine(point A, point B, point C, point D) {  // AB (beam) -> C
    return three(C, D, A, B);
}

long double twelve(point A, point B, point C, point D) {  // AB (beam) -> CD (line)
    if (isCol(A, B, C, D)) {
        if (line(C, D).distpoint(A) == 0) {
            return 0;
        }
        return line(C, D).distpoint(A);
    }
    if (signInt((C - A) % (C - D)) * signInt((C - B) % (C - D)) <= 0 &&
        signInt((D - A) % (D - C)) * signInt((D - B) % (D - C)) <= 0) {
        return 0;
    }
    if (four(A, B, C, D) < four(B, A, C, D)) {
        return four(A, B, C, D);
    }
    return 0;
}

long double eleven(point A, point B, point C, point D) {  // AB (beam) -> CD (beam)
    if (isCol(A, B, C, D)) {
        return min({three(A, B, C, D), three(B, A, C, D), three(C, D, A, B), three(D, C, A, B)});
    }
    if (twelve(A, B, C, D) == 0 && twelve(C, D, A, B) == 0) {
        return 0;
    }
    return min({three(A, B, C, D), three(B, A, C, D), three(C, D, A, B), three(D, C, A, B)});
}

bool segmentOnBeam(point a, point b, point c, point d) {
    if (isCol(a, b, c, d)) {
        if (line(c, d).distpoint(a) == 0) {
            return min(three(a, b, c, d), three(b, a, c, d)) == 0;
        } else {
            return false;
        }
    }
    if (eight(a, b, c, d) == 0 && twelve(c, d, a, b) == 0) {
        return true;
    }
    return false;
}

long double seven(point A, point B, point C, point D) {  // AB (segment) -> CD (beam)
    if (segmentOnBeam(A, B, C, D)) {
        return 0;
    }
    return min({three(A, B, C, D), three(B, A, C, D), two(C, D, A, B)});
}

long double ten(point A, point B, point C, point D) {  // AB (beam) -> CD (segment)
    return seven(C, D, A, B);
}

long double thirteen(point A, point B, point C, point D) {  // AB (line) -> C
    return four(C, D, A, B);
}

long double fourteen(point A, point B, point C, point D) {  // AB (line) -> CD (segment)
    return eight(C, D, A, B);
}

long double fiveteen(point A, point B, point C, point D) {  // AB (line) -> CD (beam)
    return twelve(C, D, A, B);
}

long double sixteen(point A, point B, point C, point D) {  // AB (line) -> CD (line)
    if (isCol(A, B, C, D)) {
        return four(A, B, C, D);
    }
    return 0;
}

bool point_in_segment(point p, point a, point b) {
    point ab = b - a;
    point ap = p - a;
    point bp = p - b;
    return ab % ap == 0 && ap * bp <= 0;
}

bool point_in_angle(point p, point a, point o, point b) {
    point oa = a - o;
    point ob = b - o;
    point op = p - o;
    return sign(oa % op) * sign(oa % ob) >= 0 && sign(ob % op) * sign(ob % oa) >= 0;
}

bool point_in_triangle(point p, point a, point b, point c) {
    return point_in_angle(p, a, b, c) && point_in_angle(p, b, c, a) && point_in_angle(p, a, c, b);
}

bool point_in_polygon1(point p, vector<point> &polygon) {
    int n = (int)polygon.size();
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n;
        if (point_in_segment(p, polygon[i], polygon[j])) return true;
    }
    ld ang = 0;
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n;
        ang += angle(polygon[i] - p, polygon[j] - p);
    }
    ang = fabs(ang);
    return check(ang, 2 * pi);
}

int point_in_polygon2(point p, vector<point> &polygon) {
    int n = (int)polygon.size();
    point start = polygon[0];
    int l = 1, r = n - 1;
    if (!point_in_angle(p, polygon[l], start, polygon[r])) return 0;
    while (r - l > 1) {
        int mid = (l + r) / 2;
        if (point_in_angle(p, polygon[mid], start, polygon[r]))
            l = mid;
        else
            r = mid;
    }
    point lf = polygon[l];
    point rg = polygon[r];
    if ((point_in_segment(p, start, lf) && (l == 1)) ||
        (point_in_segment(p, start, rg) && (r == n - 1)) ||
        point_in_segment(p, lf, rg))
        return 1;
    if (point_in_triangle(p, lf, start, rg)) return 2;
    return 0;
}

vector<point> convex_hull(vector<point> &points) {
    point first = points[0];
    for (int i = 0; i < (int)points.size(); i++) {
        first = min(first, points[i]);
    }
    sort(points.begin(), points.end(), [first](point a, point b) {
        point pa = a - first;
        point pb = b - first;
        return (pb % pa) > 0 || (pa % pb == 0 && pa.len2() < pb.len2());
    });
    vector<point> res;
    res.push_back(first);
    for (int i = 1; i < (int)points.size(); i++) {
        point p = points[i];
        while (res.size() > 1) {
            point a = res[res.size() - 2];
            point b = res[res.size() - 1];
            point ap = p - a;
            point ab = b - a;
            if (ab % ap >= 0) {
                res.pop_back();
            } else {
                break;
            }
        }
        res.push_back(p);
    }
    return res;
}

ld per(vector<point> &polygon) {
    ld res = 0;
    int n = (int)polygon.size();
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n;
        point cur = polygon[i] - polygon[j];
        res += cur.len();
    }
    return res;
}

ld area(vector<point> &polygon) {
    ll res = 0;
    int n = (int)polygon.size();
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n;
        res += polygon[i] % polygon[j];
    }
    return (ld)res / 2;
}
///////////////////////////////////////////////////////////////////////////
                      HLD.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
int n, timer = 0;
vector<vector<int>> g;
vector<int> sz, tin, tout, head, parent, rin;
segtree st;

int dfs_sz(int v, int p = 0) {
    sz[v] = 1;
    for (auto& to : g[v]) {
        if (to != p) {
            sz[v] += dfs_sz(to, v);
            if (sz[to] > sz[g[v][0]])
                swap(to, g[v][0]);
        }
    }
    return sz[v];
}

void dfs_hld(int v, int p = 0) {
    parent[v] = p;
    tin[v] = timer++;
    rin[tin[v]] = v;
    for (auto to : g[v]) {
        if (to != p) {
            head[to] = (to == g[v][0] ? head[v] : to);
            dfs_hld(to, v);
        }
    }
    tout[v] = timer;
}

bool upper(int a, int b) {
    return tin[a] <= tin[b] && tout[a] >= tout[b];
}

int get_sum(int v) {
    int tree_sum = st.get(1, tin[v] + 1, tout[v], 0, st.sz);  // sum on seg
    int path_sum = 0;
    while (true) {
        if (head[v] != head[0]) {
            path_sum = (path_sum + st.get(1, tin[head[v]], tin[v] + 1, 0, st.sz)) % mod;
            v = parent[head[v]];
        } else {
            path_sum = (path_sum + st.get(1, tin[0], tin[v] + 1, 0, st.sz)) % mod;
            break;
        }
    }
    return (tree_sum + path_sum) % mod;
}

void update(int v, int x) {
    st.update(1, tin[v] + 1, tout[v], 0, st.sz, x);  // lazy add on segment
    while (true) {
        if (head[v] != head[0]) {
            st.update(1, tin[head[v]], tin[v] + 1, 0, st.sz, x);
            v = parent[head[v]];
        } else {
            st.update(1, tin[0], tin[v] + 1, 0, st.sz, x);
            break;
        }
    }
}

void solve() {
    dfs_sz(0);
    dfs_hld(0);
    st.build(value, rin);
}
///////////////////////////////////////////////////////////////////////////
                      IMPLICIT_TREAP.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
mt19937 rnd(time(0));
const int INF = 1e9 + 7;

struct Node {
    Node *l, *r;
    bool rev;
    int val, prior, sz, mn;
 
    Node(int _val) {
        val = _val;
        mn = _val;
        prior = rnd();
        sz = 1;
        rev = false;
        l = r = nullptr;
    }
};
 
int size(Node *t) {
    return (!t ? 0 : t->sz);
}
 
int minim(Node *t) {
    return (!t ? INF : t->mn);
}
 
void upd(Node *t) {
    t->sz = size(t->l) + size(t->r) + 1;
    t->mn = min({minim(t->l), minim(t->r), t->val});
}
 
void swp(Node *t, bool f) {
    if (!t) return;
    if ((t->rev ^ f) != t->rev) {
        swap(t->l, t->r);
    }
    t->rev ^= f;
}
 
void push(Node *t) {
    if (!t) return;
    swp(t->l, t->rev);
    swp(t->r, t->rev);
    t->rev = false;
}
 
void print(Node *t) {
    if (!t) return;
    push(t);
    print(t->l);
    cout << t->val << " ";
    print(t->r);
}
 
Node *merge(Node *l, Node *r) {
    if (!l) return r;
    if (!r) return l;
    push(l);
    push(r);
    if (l->prior >= r->prior) {
        l->r = merge(l->r, r);
        upd(l);
        return l;
    } else {
        r->l = merge(l, r->l);
        upd(r);
        return r;
    }
}
 
pair<Node *, Node *> split(Node *t, int k) {
    if (!t) return make_pair(nullptr, nullptr);
    push(t);
    if (size(t->l) >= k) {
        auto [l, r] = split(t->l, k);
        t->l = r;
        upd(t);
        return make_pair(l, t);
    } else {
        auto [l, r] = split(t->r, k - size(t->l) - 1);
        t->r = l;
        upd(t);
        return make_pair(t, r);
    }
}
 
Node *rev(Node *t, int l, int r) {
    auto [L, R] = split(t, r);
    auto [L1, R1] = split(L, l - 1);
    swp(R1, true);
    t = merge(merge(L1, R1), R);
    return t;
}
 
int ask(Node *t, int l, int r) {
    auto [L, R] = split(t, r);
    auto [L1, R1] = split(L, l - 1);
    int ans = minim(R1);
    t = merge(merge(L1, R1), R);
    return ans;
}
 
Node *erase(Node *t, int id) {
    auto [l, mid] = split(t, id);
    auto [m, r] = split(mid, 1);
    t = merge(l, r);
    return t;
}
///////////////////////////////////////////////////////////////////////////
                      LCA.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
const int maxn = 1e5 + 1;
const int logn = 18;
vector<vector<int>> g(maxn);
vector<int> tin(maxn);
vector<int> tout(maxn);
vector<vector<int>> up(maxn, vector<int>(logn));
int timer = 0;
 
void dfs(int v, int p) {
    tin[v] = timer++;
    up[v][0] = p;
    for (int i = 1; i < logn; i++)
        up[v][i] = up[up[v][i - 1]][i - 1];
    for (auto to: g[v])
        if (to != p) dfs(to, v);
    tout[v] = timer;
}
 
bool upper(int a, int b) {
    return tin[a] <= tin[b] && tout[a] >= tout[b];
}
 
int getLCA(int a, int b) {
    if (upper(a, b)) return a;
    if (upper(b, a)) return b;
    for (int i = logn - 1; i >= 0; i--)
        if (!upper(up[a][i], b)) a = up[a][i];
    return up[a][0];
}

int LA(int a, int k) {
    for (int i = logn - 1; i >= 0; i--) {
        if (k & (1 << i)) {
            a = up[i][a];
        }
    }
    return a;
}
///////////////////////////////////////////////////////////////////////////
                      STRINGS.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
vector<int> pref_func(string s) {
    int n = s.size();
    vector<int> p(n, 0);
    p[0] = 0;
    for (int i = 1; i < n; i++) {
        int k = p[i - 1];
        while (k != 0 && s[k] != s[i]) {
            k = p[k - 1];
        }
        if (s[k] == s[i]) {
            k++;
        }
        p[i] = k;
    }
    return p;
}

vector<int> z_func(string &s) {
    int n = s.size();
    vector<int> z(n, 0);
    int l = 0, r = 0;
    for (int i = 1; i < n; i++) {
        z[i] = max(0, min(r - i + 1, z[i - l]));
        while (z[i] + i < n && s[z[i]] == s[i + z[i]]) {
            z[i]++;
        }
        if (z[i] + i - 1 > r) {
            r = z[i] + i - 1;
            l = i;
        }
    }
    return z;
}

int pls(int a, int b, int MOD) {
    a += b;
    if (a >= MOD) a -= MOD;
    return a;
}

int mns(int a, int b, int MOD) {
    a -= b;
    if (a < 0) a += MOD;
    return a;
}

int prd(int a, int b, int MOD) {
    return (1ll * a * b) % MOD;
}

pair<int, int> mods = {1e9 + 7, 998244353};
pair<int, int> bases1 = {179, 239}, bases2{57, 130};

pair<int, int> operator+(pair<int, int> a, pair<int, int> b) {
    return {
        pls(a.first, b.first, mods.first),
        pls(a.second, b.second, mods.second)};
}

pair<int, int> operator-(pair<int, int> a, pair<int, int> b) {
    return {
        mns(a.first, b.first, mods.first),
        mns(a.second, b.second, mods.second)};
}

pair<int, int> operator*(pair<int, int> a, pair<int, int> b) {
    auto res = pair<int, int>{
        prd(a.first, b.first, mods.first),
        prd(a.second, b.second, mods.second)};
    return res;
}

struct MyHash {
    int n, m;
    vector<vector<pair<int, int>>> pref;
    vector<pair<int, int>> pw1, pw2;
    vector<string> val;

    MyHash(vector<string> &_val) {
        val = _val;
        n = (int)val.size(), m = (int)val[0].size();
        pref.resize(n + 1, vector<pair<int, int>>(m + 1, {0, 0}));
        pw1.resize(n + 1, {1, 1});
        pw2.resize(m + 1, {1, 1});
        for (int i = 1; i <= n; i++) {
            pw1[i] = pw1[i - 1] * bases1;
        }
        for (int i = 1; i <= m; i++) {
            pw2[i] = pw2[i - 1] * bases2;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                int cur = val[i - 1][j - 1] - 'a' + 1;
                pref[i][j] = pref[i - 1][j] * bases1 +
                             pref[i][j - 1] * bases2 -
                             pref[i - 1][j - 1] * bases1 * bases2 +
                             pair<int, int>{cur, cur};
            }
        }
    }

    pair<int, int> get(int l1, int l2, int r1, int r2) {
        auto res = pref[r1][r2] -
                   (pref[l1][r2] * pw1[r1 - l1]) -
                   (pref[r1][l2] * pw2[r2 - l2]) +
                   (pref[l1][l2] * pw1[r1 - l1] * pw2[r2 - l2]);
        return res;
    }
};
///////////////////////////////////////////////////////////////////////////
                      TEMPLATE.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
#include <bits/stdc++.h>
// #pragma comment(linker, "/STACK:16777216")
// #pragma GCC optimize("O3,unroll-loops")
// #pragma GCC target("avx2,sse4,fma,bmi,bmi2,popcnt,lzcnt,abm,tune=native")

using namespace std;
using uint = unsigned int;
using ll = long long;
using ull = unsigned long long;
using dbl = double;
using ld = long double;
using pi = pair<int, int>;
using pll = pair<ll, ll>;
using pd = pair<dbl, dbl>;
using pld = pair<ld, ld>;

// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// typedef tree<int, null_type, less<>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define ft first
#define sc second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()

void solve() {
    
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    // freopen("", "r", stdin); 
    // freopen("", "w", stdout);

    int t = 1;
    // cin >> t;
    while (t--) solve();
    return 0;
}

///////////////////////////////////////////////////////////////////////////
                      TREAP.CPP STARTS HERE
///////////////////////////////////////////////////////////////////////////
mt19937 rnd(time(0));

struct Node {
    Node *l, *r;
    int key, prior, sz;

    Node(int _key) {
        l = nullptr;
        r = nullptr;
        key = _key;
        prior = rnd();
        sz = 1;
    }
};

void print(Node *t) {
    if (!t) return;
    upd(t);
    print(t->l);
    cout << t->key << " ";
    print(t->r);
}

int size(Node *t) {
    return (!t ? 0 : t->sz);
}

void upd(Node *t) {
    if (!t) return;
    t->sz = size(t->l) + size(t->r) + 1;
}

Node *merge(Node *l, Node *r) {
    if (!l) return r;
    if (!r) return l;
    if (l->prior >= r->prior) {
        l->r = merge(l->r, r);
        upd(l);
        return l;
    } else {
        r->l = merge(l, r->l);
        upd(r);
        return r;
    }
}

pair<Node *, Node *> split(Node *t, int x) {
    if (!t) return make_pair(nullptr, nullptr);
    if (t->key < x) {
        auto [l, r] = split(t->r, x);
        t->r = l;
        upd(t);
        return make_pair(t, r);
    } else {
        auto [l, r] = split(t->l, x);
        t->l = r;
        upd(t);
        return make_pair(l, t);
    }
}

Node *insert(Node *t, int x) {
    auto [l, r] = split(t, x);
    Node *newNode = new Node(x);
    t = merge(merge(l, newNode), r);
    return t;
}

Node *del(Node *t, int x) {
    auto [l, r] = split(t, x);
    auto [l1, r1] = split(r, x + 1);
    t = merge(l, r1);
    return t;
}

int findKth(Node *t, int k) {
    if (size(t->r) >= k)
        return findKth(t->r, k);
    else if (size(t->r) + 1 == k)
        return t->key;
    else
        return findKth(t->l, k - 1 - size(t->r));
}
